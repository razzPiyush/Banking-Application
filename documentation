GET /accounts/getAll -> Retrieve all accounts from the database.
POST /accounts/add -> Add a new account to the database.
GET /accounts/getById/{id} -> Retrieve an account by its ID.
PUT /accounts/update/{id} -> Update an existing account by its ID. Generates a unique account ID if accountStatus is 3
    and accountId is 0, and creates a customer entry for the account.
GET /accounts/getAllByStatus/{status} -> Retrieve all accounts with a specific account status.
POST /login/api/secured/token -> Authenticate an admin using Basic Auth and generate a secure token.

POST /customers/scheduleTransaction -> Schedule one or more transactions by setting their status to "scheduled" and
     saving them to the database.
POST /login/customer/api/secured/token -> Authenticate a customer using Basic Auth and generate a secure token.
POST /transfer/betweenAccounts -> Transfer money between accounts or to another bank account.
GET /transfer/transactionHistory/{accountId} -> Retrieve the transaction history of a specific account.
GET /transfer/balance/{accountId} -> Retrieve the account details including balance for a specific account.
GET /transfer/balanceAmountOnly/{accountId} -> Retrieve only the balance of a specific account.

GET /schedule/sf -> Returns a simple greeting message ("helo").
GET /schedule/hello -> Executes a scheduled batch job and returns its status.

Customer {customerId, customerName, userName, password, userId, set<Account> accounts, token}
Account {id, bankIfsc, firstName, lastName, phoneNo, balance, date, accountStatus, proof, customer}
Admin {adminId, adminName, userName, List<Role>adminRole}
CustomAdminDetails {extends Admin implements UserDetails}
CustomCustomerDetails {extends Customer implements UserDetails}
OtherAccount {id, bankIfsc, firstName, lastName, balance, date, accountStatus, customer}
PrimaryTransaction {id, date, localDateTime, description, type, status, amount, availableBalance, recipientName,
                   recipientAccountNo, phoneNo}
Proof {proofId, uuid, passportNumber, emailId, dob, account}
Schedule {scheduledId, date, recipientAccountNo, status, recipientName, amount, schedule_type, type}
ScheduleList {id, List<Schedule> schedule}



---

### **Overall Architecture**
1. Microservices:
   - The system is composed of four main modules, where each one serves a specific function and communicates with others
     when needed.
   - Communication is likely handled through REST APIs, shared databases, or event-based communication.

2. Shared Library:
   - The BankData module acts as a shared library (a `.jar` file), encapsulating common functionalities like utility
     functions, data models, and validations, and is used across all microservices.

3. Database:
   - A centralized database or separate databases are used for storing:
     - Customer details (BackOffice System).
     - Transaction history (OnlineBanking, TransactionScheduling).
     - Authorization logs and records.

4. Spring Boot and Spring Batch:
   - Spring Boot is used for creating microservices.
   - Spring Batch is used in the TransactionScheduling module for batch processing.

5. Containerization and Orchestration:
   - Docker is used for containerizing the services.
   - A docker-compose.yml file orchestrates these services and ensures that they can be run as a single cohesive
     system.

---

### **Modules in Detail**

#### 1. BackOffice System
This module serves as the Admin-facing system for account management.

- Roles and Responsibilities:
  - Capturer:
    - Captures prospective customer details and submits them for authorization.
    - Updates customer details when requested by the authorizer (for incomplete/incorrect information).
  - Authorizer:
    - Reviews and approves or declines account creation requests.
    - If approved:
      - Generates a unique account number.
      - Sends credentials to the customer's phone number via SMS.
    - If declined:
      - Provides a reason for disapproval, and the request is sent back to the capturer for correction.
  - Both roles authenticate via manually entered credentials.

- Interactions with Other Modules:
  - Uses the BankData library for validations, common utilities, and shared models.
  - Interacts with a database to persist customer details, requests, and approval/rejection logs.

---

#### 2. BankData
This module acts as a shared library across all other modules.

- Purpose:
  - Encapsulates common functionalities following the DRY (Donâ€™t Repeat Yourself) principle.
  - Examples of functionalities:
    - Common models for customer and transaction data.
    - Utility functions for validation, formatting, and exception handling.
    - Reusable logic for generating unique account numbers or hashing passwords.

- Usage:
  - Packaged as a `.jar` file and imported into the other three microservices:
    - BackOffice System.
    - OnlineBanking.
    - TransactionScheduling.

---

#### 3. OnlineBanking
This module is the customer-facing system, enabling customers to manage their accounts and perform transactions.

- Key Features:
  - Login:
    - Customers log in using the credentials sent via SMS upon account approval.
  - Account Balance Check:
    - Customers can view their current account balance.
  - Transaction History:
    - Displays a log of all transactions performed by the customer up to the current date.
  - Scheduled Transactions:
    - Allows customers to create future-dated transactions, which are processed by the **TransactionScheduling** module.

- Interactions with Other Modules:
  - Uses the BankData library for data validation, utilities, and shared logic.
  - Passes scheduled transactions to the TransactionScheduling module for processing.

---

#### 4. TransactionScheduling
This module processes scheduled transactions using a batch processing system.

- Key Features:
  - Spring Batch Application:
    - Processes future-dated transactions in a batch.
    - Jobs are broken into steps:
      - Reader: Fetches transactions that are due for processing.
      - Processor: Validates and processes each transaction.
      - Writer: Writes the transaction logs and updates the database.
  - CRON Job:
    - A CRON job runs every 40 seconds to process scheduled transactions in the background.
    - Ensures timely execution of all future-dated transactions.

- Interactions with Other Modules:
  - Fetches scheduled transactions from the OnlineBanking module.
  - Uses the BankData library for validation and common logic.
  - Writes processed transaction logs back to the database.

---

### **Workflow**

#### **1. Account Creation Workflow:**
1. **Capturer Role (BackOffice System):**
   - Captures customer details and submits them for approval.
   - Updates details if returned by the authorizer.
2. **Authorizer Role (BackOffice System):**
   - Approves or rejects the request.
   - If approved:
     - Generates a unique account number.
     - Sends credentials via SMS to the customer.
   - If rejected:
     - Sends the request back to the capturer for corrections.

#### **2. Customer Login and Actions:**
1. **Login:
   - Customers log in to the **OnlineBanking** module using credentials received via SMS.
2. **Actions:**
   - View account balance and transaction history.
   - Schedule future-dated transactions.

#### **3. Scheduled Transaction Workflow:**
1. Customers schedule a transaction via the **OnlineBanking** module.
2. The transaction is stored in the database as a future-dated entry.
3. The TransactionScheduling module periodically checks (every 40 seconds) for transactions that are due for execution.
4. The transaction is processed, and the logs are updated in the database.

---

### **Summary of Key Interactions:**
1. **BackOffice System** interacts with the database to manage customer details and approvals.
2. **OnlineBanking** allows customers to perform actions like scheduling transactions.
3. **TransactionScheduling** processes future-dated transactions in batches.
4. **BankData** is the shared module that provides common utilities and reusable logic across all services.

This modular architecture ensures:
- Separation of concerns.
- Scalability for adding new features or modules.
- Ease of maintenance with reusable components like **BankData**.

